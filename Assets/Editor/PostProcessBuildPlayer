#!/usr/bin/python

import sys
import os


# Constants
FRAMEWORK_NAME = 0
FRAMEWORK_ID = 1
FRAMEWORK_FILEREFID = 2
FRAMEWORK_ATTRIBUTES = 3

RESFILE_NAME = 0
RESFILE_ID = 1
RESFILE_FILEREFID = 2
RESFILE_ATTRIBUTES = 3
RESFILE_LASTKNOWNTYPE = 4

# These ids have been generated by creating a project using Xcode then
# extracting the values from the generated project.pbxproj.  The format of this
# file is not documented by Apple so the correct algorithm for generating these
# ids is unknown

ATTRIBUTES_DEFAULT = ''
ATTRIBUTES_OPTIONAL = ' ; settings = {ATTRIBUTES = (Weak, ); }'

SECURITY_ID = '3FBEE8A717E2FED400908343'
SECURITY_FILEREFID = '3FBEE8A617E2FED400908343'

CORETELEPHONY_ID = '3FBEE8A917E2FEDA00908343'
CORETELEPHONY_FILEREFID = '3FBEE8A817E2FEDA00908343'

ADSUPPORT_ID = '3FBEE8AB17E2FEDF00908343'
ADSUPPORT_FILEREFID = '3FBEE8AA17E2FEDF00908343'

LIBZ_ID = '3FBEE8AF17E30A4800908343'
LIBZ_FILEREFID = '3FBEE8AE17E30A4800908343'

# List of all the frameworks to be added to the project
frameworks = [["Security.framework", SECURITY_ID, SECURITY_FILEREFID, ATTRIBUTES_DEFAULT], \
              ["CoreTelephony.framework", CORETELEPHONY_ID, CORETELEPHONY_FILEREFID, ATTRIBUTES_DEFAULT], \
              ["AdSupport.framework", ADSUPPORT_ID, ADSUPPORT_FILEREFID, ATTRIBUTES_OPTIONAL], \
              ["libz.dylib", LIBZ_ID, LIBZ_FILEREFID, ATTRIBUTES_DEFAULT]]

# List of data files to be added to the app bundle
resfiles = []



# Adds a line into the PBXBuildFile section
def add_build_file(pbxproj, id, name, fileref, attrib):
    subsection = 'Resources'
    if name[-9:] == 'framework':
        subsection = 'Frameworks'
    print "Adding build file " + name + '\n'
    pbxproj.write('\t\t' + id + ' = {isa = PBXBuildFile; fileRef = ' + fileref + attrib + ' ; };\n')

#Adds a line to the PBXFileReference to add a resource file
def add_res_file_reference(pbxproj, id, name, last_known_file_type):
    print "Adding data file reference " + name + "\n"
    pbxproj.write('\t\t' + id + ' = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = ' + last_known_file_type + '; name = ' + name + '; path = Data/Raw/' + name + '; sourceTree = SOURCE_ROOT; };\n')

# Adds a line into the PBXFileReference section to add a framework
def add_framework_file_reference(pbxproj, id, name):
    print "Adding framework file reference " + name + '\n'
    filetype = 'wrapper.framework'
    filepath = 'System/Library/Frameworks/'
    if name[-5:] == 'dylib':
        filetype = '\"compiled.mach-o.dylib\"'
        filepath = 'usr/lib/'
        pass
    pbxproj.write('\t\t' + id + ' = {isa = PBXFileReference; lastKnownFileType = ' + filetype + '; name = ' + name + '; path = ' + filepath + name + '; sourceTree = SDKROOT; };\n')

# Adds a line into the PBXFrameworksBuildPhase section
def add_frameworks_build_phase(pbxproj, id, name):
    print "Adding build phase " + name + '\n'
    pbxproj.write('\t\t\t\t' + id + ' ,\n')

# Adds a line into the PBXResourcesBuildPhase section
def add_resources_build_phase(pbxproj, id, name):
    print "Adding build phase " + name + '\n'
    pbxproj.write('\t\t\t\t' + id + ' ,\n')

# Adds a line into the PBXGroup section
def add_group(pbxproj, id, name):
    print "Add group " + name + '\n'
    pbxproj.write('\t\t\t\t' + id + ' ,\n')

# Returns a list of all the files already in a pbxproj
#    lines - a list of all the lines read in from a pbxproj
def read_existing_files(lines):
    begin_pbxbuildfile_section = False
    existing_files = []
    i = 0
    line = lines[i]
    while line[3:6] != 'End':
        if not begin_pbxbuildfile_section:
            begin_pbxbuildfile_section = (line[3:21] == 'Begin PBXBuildFile')
        else:
            existing_files.append(line.split()[2])
        i = i + 1
        line = lines[i]

    return existing_files


# Processes the given xcode project to add or change the supplied parameters
#   xcodeproj_filename - filename of the Xcode project to change
#   frameworks - list of Apple standard frameworks to add to the project
#   resfiles - list resource files added to the project
def process_pbxproj(xcodeproj_filename, frameworks, resfiles):

    # Open up the file generated by Unity and read into memory as
    # a list of lines for processing
    pbxproj_filename = xcodeproj_filename + '/project.pbxproj'
    pbxproj = open(pbxproj_filename, 'r')
    lines = pbxproj.readlines()
    pbxproj.close()

    # Work out which of the resfiles exist and remove them if they don't, this
    # is because if using frame markers there may not be a qcar-resources.dat
    resfiles = [x for x in resfiles if os.path.exists(xcodeproj_filename + '/../Data/Raw/' + x[RESFILE_NAME])]

    # Next open up an empty project.pbxproj for writing and iterate over the old
    # file copying the original file and inserting anything extra we need
    pbxproj = open(pbxproj_filename, 'w')

    # As we iterate through the list we'll record which section of the
    # project.pbxproj we are currently in
    section = ''

    # We use these booleans to decide whether we have already added the list of
    # build files to the link line.  This is needed because there could be multiple
    # build targets and they are not named in the project.pbxproj
    frameworks_build_added = False
    res_build_added = False

    # Build a list of the files already added to the project.  Then use it to
    # avoid adding anything to the project twice
    existing_files = read_existing_files(lines)
    filtered_frameworks = []
    for framework in frameworks:
        if framework[0] not in existing_files:
            filtered_frameworks.append(framework)
    frameworks = filtered_frameworks
    for resfile in resfiles:
        if resfile[0] in existing_files:
            resfiles.remove(resfile)
   
  
    # Now iterate through the project adding any new lines where needed
    i = 0
    for i in range(0, len(lines)):
        line = lines[i]
        pbxproj.write(line)

        # Each section starts with a comment such as
        # '
        if line[3:8] == 'Begin':
            section = line.split(' ')[2]
            if section == 'PBXBuildFile':
                for framework in frameworks:
                    add_build_file(pbxproj, framework[FRAMEWORK_ID], framework[FRAMEWORK_NAME], framework[FRAMEWORK_FILEREFID], framework[FRAMEWORK_ATTRIBUTES])
                for resfile in resfiles:
                    add_build_file(pbxproj, resfile[RESFILE_ID], resfile[RESFILE_NAME], resfile[RESFILE_FILEREFID], '')

            if section == 'PBXFileReference':
                for framework in frameworks:
                    add_framework_file_reference(pbxproj, framework[FRAMEWORK_FILEREFID], framework[FRAMEWORK_NAME])
                for resfile in resfiles:
                    add_res_file_reference(pbxproj, resfile[RESFILE_FILEREFID], resfile[RESFILE_NAME], resfile[RESFILE_LASTKNOWNTYPE])
   
        if line[3:6] == 'End':
            section = ''
  
        if section == 'PBXFrameworksBuildPhase':
            if line.strip()[0:5] == 'files':
                if not frameworks_build_added:
                    for framework in frameworks:
                        add_frameworks_build_phase(pbxproj, framework[FRAMEWORK_ID], framework[FRAMEWORK_NAME])
                    frameworks_build_added = True

        # The PBXResourcesBuildPhase section is what appears in XCode as 'Link
        # Binary With Libraries'.  As with the frameworks we make the assumption the
        # first target is always 'Unity-iPhone' as the name of the target itself is
        # not listed in project.pbxproj
        if section == 'PBXResourcesBuildPhase':
            if line.strip()[0:5] == 'files':
                if not res_build_added:
                    for resfile in resfiles:
                        add_resources_build_phase(pbxproj,resfile[RESFILE_ID], resfile[RESFILE_NAME])
                    res_build_added = True

        # The PBXGroup is the section that appears in XCode as 'Copy Bundle Resources'.
        if section == 'PBXGroup':
            if (line.strip()[0:8] == 'children') and (lines[i-2].strip().split(' ')[2] == 'CustomTemplate'):
                for resfile in resfiles:
                    add_group(pbxproj, resfile[RESFILE_FILEREFID], resfile[RESFILE_NAME])
                for framework in frameworks:
                    add_group(pbxproj, framework[FRAMEWORK_FILEREFID], framework[FRAMEWORK_NAME])



    pbxproj.close()


# Script start
print "Starting PostProcessBuildPlayer with the following arguments..."

i = 0
for args in sys.argv:
    print str(i) +': ' + args
    i += 1

# Check this is an iOS build before running
if sys.argv[2] == "iPhone":

    xcodeproj_full_path_name = sys.argv[1] + '/Unity-iPhone.xcodeproj'
    process_pbxproj(xcodeproj_full_path_name, frameworks, resfiles)