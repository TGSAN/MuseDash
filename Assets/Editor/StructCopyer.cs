// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Runtime.Serialization;
using System.Runtime.Serialization.Formatters.Binary;

namespace StructCopyer {
	public static class StructCopyer {
		//        相当于序列化与反序列化，但是不用借助外部文件
		//1、struct转换为Byte[]
		public static Byte[] StructToBytes(Object structure) {
			Int32 size = Marshal.SizeOf(structure);
			IntPtr buffer = Marshal.AllocHGlobal(size);
			try {
				Marshal.StructureToPtr(structure, buffer, false);
				Byte[] bytes = new Byte[size];
				Marshal.Copy(buffer, bytes, 0, size);
				
				return bytes;
			}
			finally {
				Marshal.FreeHGlobal(buffer);
			}
		}
		
		//2、Byte[]转换为struct
		public static Object BytesToStruct(Byte[] bytes, Type strcutType) {
			Int32 size = Marshal.SizeOf(strcutType);
			IntPtr buffer = Marshal.AllocHGlobal(size);

			try {
				Marshal.Copy(bytes, 0, buffer, size);
				return Marshal.PtrToStructure(buffer, strcutType);
				//return Marshal.PtrToStructure(buffer, strcutType);
				//return null;
			}
			finally {
				Marshal.FreeHGlobal(buffer);
			}
		}

		public static void BytesToStruct(Byte[] bytes, object strcutObj) {
			Int32 size = Marshal.SizeOf (strcutObj.GetType ());
			IntPtr buffer = Marshal.AllocHGlobal(size);
			
			try {
				Marshal.Copy(bytes, 0, buffer, size);
				Marshal.PtrToStructure(buffer, strcutObj);
				//return Marshal.PtrToStructure(buffer, strcutType);
				//return null;
			}
			finally {
				Marshal.FreeHGlobal(buffer);
			}
		}

		public static T Copy<T>(T RealObject) {
			using (System.IO.Stream objectStream = new System.IO.MemoryStream()) {  
				//利用 System.Runtime.Serialization序列化与反序列化完成引用对象的复制     
				IFormatter formatter = new BinaryFormatter (); 
				formatter.Serialize (objectStream, RealObject);
				objectStream.Seek (0, System.IO.SeekOrigin.Begin);
				return (T)formatter.Deserialize (objectStream);
			}
		}
	}
}
