// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using LitJson;
using DYUnityLib;
using UnityEngine;

public class ConfigPool {
	private JsonData pool = null;
	private ConfigLoader cLoader = null;

	private static ConfigPool instance;
	public static ConfigPool Instance {
		get {
			if (instance == null) {
				instance = new ConfigPool ();
			}
			
			return instance;
		}
	}

	public ConfigPool () {
		this.cLoader = new ConfigLoader ();
		this.Reflesh ();
	}

	public void Reflesh() {
		this.pool = new JsonData ();
		if (FormulaBase.ConfigKeys.NamePaths == null) {
			return;
		}

		foreach (string name in FormulaBase.ConfigKeys.NamePaths.Keys) {
			this.ChargeConfig (name, FormulaBase.ConfigKeys.NamePaths [name]);
		}
	}

	public JsonData GetConfigByName(string filename, string path = null) {
		if (!this.pool.Keys.Contains (filename)) {
			// this.ChargeConfig (filename, path);
			Debug.Log ("缺少配置" + filename);
			return null;
		}

		if (!this.pool.Keys.Contains (filename)) {
			return null;
		}

		return this.pool [filename];
	}

	public int GetConfigLenght(string filename) {
		JsonData jd = this.GetConfigByName (filename);
		if (jd == null) {
			return 0;
		}

		return jd.Count;
	}

	public int GetMusicCount() {
		JsonData stageConfig = this.pool ["stage"];
		int lack = 0;
		int c = stageConfig.Count;
		for (int i = 1; i < c + 1; i++) {
			if (!stageConfig.Keys.Contains (i.ToString ())) {
				lack += 1;
			}
		}

		return c - lack;
	}

	public int GetConfigIntValue(string filename, string id, string key, int defaultValue = 0) {
		JsonData jData = this.GetConfigValue (filename, id, key);
		if (jData == null) {
			return defaultValue;
		}

		return int.Parse (jData.ToString ());
	}

	public string GetConfigStringValue(string filename, string id, string key, int defaultValue = 0) {
		JsonData jData = this.GetConfigValue (filename, id, key);
		if (jData == null) {
			return null;
		}
		
		return jData.ToString ();
	}

	public JsonData GetConfigValue(string filename, string id, string key) {
		if (this.pool == null) {
			return null;
		}

		if (!this.pool.Keys.Contains (filename)) {
			UnityEngine.Debug.Log ("No such config called " + filename);
			return null;
		}

		JsonData cfg = this.pool [filename];
		if (cfg == null) {
			return null;
		}

		if (!cfg.Keys.Contains (id)) {
			if (GameLogic.GameGlobal.IS_DEBUG) {
				UnityEngine.Debug.Log ("File " + filename + " has no index " + id);
			}

			return null;
		}

		JsonData idcfg = cfg [id];
		if (idcfg == null) {
			return null;
		}

		if (!idcfg.Keys.Contains (key)) {
			return null;
		}

		return idcfg [key];
	}

	private void ChargeConfig(string filename, string path = null) {
		JsonData cfg = this.cLoader.LoadAsJsonData (filename, path);
		if (cfg == null) {
			//UnityEngine.Debug.Log ("Charge : No such config called " + path + filename);
			return;
		}

		this.pool [filename] = cfg;
	}
}