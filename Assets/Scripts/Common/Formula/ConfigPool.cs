// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using DYUnityLib;
using LitJson;
using System;
using Assets.Scripts.Tools.Managers;
using UnityEngine;

public class ConfigPool
{
    private JsonData pool = null;
    private ConfigLoader cLoader = null;

    private static ConfigPool instance;

    public static ConfigPool Instance
    {
        get
        {
            if (instance == null)
            {
                instance = new ConfigPool();
            }

            return instance;
        }
    }

    public ConfigPool()
    {
        this.cLoader = new ConfigLoader();
        this.Reflesh();
    }

    public void Reflesh()
    {
        this.pool = new JsonData();
        if (FormulaBase.ConfigKeys.NamePaths == null)
        {
            return;
        }

        foreach (string name in FormulaBase.ConfigKeys.NamePaths.Keys)
        {
            this.ChargeConfig(name, FormulaBase.ConfigKeys.NamePaths[name]);
        }
    }

    public JsonData GetConfigByName(string filename, string path = null)
    {
        if (!this.pool.Keys.Contains(filename))
        {
            // this.ChargeConfig (filename, path);
            Debug.Log("缺少配置" + filename);
            return null;
        }

        if (!this.pool.Keys.Contains(filename))
        {
            return null;
        }

        return this.pool[filename];
    }

    public int GetConfigLenght(string filename)
    {
        JsonData jd = this.GetConfigByName(filename);
        if (jd == null)
        {
            return 0;
        }

        return jd.Count;
    }

    public int GetMusicCount()
    {
        JsonData stageConfig = this.pool["stage"];
        int lack = 0;
        int c = stageConfig.Count;
        for (int i = 1; i < c + 1; i++)
        {
            if (!stageConfig.Keys.Contains(i.ToString()))
            {
                lack += 1;
            }
        }

        return c - lack;
    }

    public int GetConfigIntValue(string filename, string id, string key, int defaultValue = 0)
    {
        JsonData jData = this.GetConfigValue(filename, id, key);
        if (jData == null)
        {
            return defaultValue;
        }

        return int.Parse(jData.ToString());
    }

    public int GetConfigIntValue(string filename, int index, string key, int defaultValue = 0)
    {
        JsonData jData = this.GetConfigValue(filename, index, key);
        if (jData == null)
        {
            return defaultValue;
        }

        return int.Parse(jData.ToString());
    }

    public int GetConfigIntValue(string filename, string compkey, string valuekey, object compvalue, int defaultValue = 0)
    {
        JsonData jData = this.GetConfigValue(filename, compkey, valuekey, compvalue);
        if (jData == null)
        {
            return defaultValue;
        }

        return int.Parse(jData.ToString());
    }

    public string GetConfigStringValue(string filename, string id, string key)
    {
        JsonData jData = this.GetConfigValue(filename, id, key);
        if (jData == null)
        {
            return null;
        }

        return jData.ToString();
    }

    public string GetConfigStringValue(string filename, int index, string key)
    {
        JsonData jData = this.GetConfigValue(filename, index, key);
        if (jData == null)
        {
            return null;
        }

        return jData.ToString();
    }

    public string GetConfigStringValue(string filename, string compkey, string valuekey, object compvalue)
    {
        JsonData jData = this.GetConfigValue(filename, compkey, valuekey, compvalue);
        if (jData == null)
        {
            return null;
        }

        return jData.ToString();
    }

    public JsonData GetConfigValue(string filename, string compkey, string valuekey, object compvalue)
    {
        JsonData jd = this.GetConfigByName(filename);
        if (jd == null)
        {
            return null;
        }

        if (jd.IsArray)
        {
            for (int i = 0; i < jd.Count; i++)
            {
                var jid = jd[i];
                var _jd = jid[compkey];
                if (_jd.IsInt)
                {
                    if (int.Parse(_jd.ToString()) == (int)compvalue)
                    {
                        return jid[valuekey];
                    }
                }

                if (_jd.IsString)
                {
                    if (_jd.ToString() == compvalue.ToString())
                    {
                        return jid[valuekey];
                    }
                }

                if (_jd.IsDouble)
                {
                    if (float.Parse(_jd.ToString()) == (float)compvalue)
                    {
                        return jid[valuekey];
                    }
                }
            }
        }
        else
        {
            foreach (string jid in jd.Keys)
            {
                JsonData _jd = this.GetConfigValue(filename, jid, compkey);
                if (_jd == null)
                {
                    continue;
                }

                if (_jd.IsInt)
                {
                    if (int.Parse(_jd.ToString()) == (int)compvalue)
                    {
                        return this.GetConfigValue(filename, jid, valuekey);
                    }
                }

                if (_jd.IsString)
                {
                    if (_jd.ToString() == compvalue.ToString())
                    {
                        return this.GetConfigValue(filename, jid, valuekey);
                    }
                }

                if (_jd.IsDouble)
                {
                    if (float.Parse(_jd.ToString()) == (float)compvalue)
                    {
                        return this.GetConfigValue(filename, jid, valuekey);
                    }
                }
            }
        }

        return null;
    }

    public JsonData GetConfigValue(string filename, string id)
    {
        if (this.pool == null)
        {
            return null;
        }

        if (!this.pool.Keys.Contains(filename))
        {
            UnityEngine.Debug.Log("No such config called " + filename);
            return null;
        }

        JsonData cfg = this.pool[filename];
        if (cfg == null)
        {
            return null;
        }

        if (!cfg.Keys.Contains(id))
        {
            if (GameLogic.GameGlobal.IS_DEBUG)
            {
                UnityEngine.Debug.Log("File " + filename + " has no index " + id);
            }

            return null;
        }
        return cfg[id];
    }

    public JsonData GetConfigValue(string filename, int index)
    {
        var jData = ConfigManager.instance[filename];
        if (jData != null)
        {
            return jData[index];
        }
        return null;
    }

    public JsonData GetConfigValue(string filename, string id, string key)
    {
        var idcfg = GetConfigValue(filename, id);
        if (idcfg == null)
        {
            return null;
        }

        if (!idcfg.Keys.Contains(key))
        {
            return null;
        }

        return idcfg[key];
    }

    public JsonData GetConfigValue(string filename, int index, string key)
    {
        var jData = GetConfigValue(filename, index);
        if (jData == null)
        {
            return null;
        }

        if (!jData.Keys.Contains(key))
        {
            return null;
        }

        return jData[key];
    }

    private void ChargeConfig(string filename, string path = null)
    {
        JsonData cfg = this.cLoader.LoadAsJsonData(filename, path);
        if (cfg == null)
        {
            //UnityEngine.Debug.Log ("Charge : No such config called " + path + filename);
            return;
        }

        this.pool[filename] = cfg;
    }
}