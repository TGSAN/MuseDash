// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using cn.bmob.io;
using cn.bmob.json;
using LitJson;
using System;
using System.Collections.Generic;
using UnityEngine;

namespace FormulaBase
{
    /// <summary>
    /// Formula host.
    ///
    /// Manage all formula of an object,
    /// for example a Role, role.formulaHost = new FormulaHost(role);
    ///
    /// Formula quote under the range of the same host.
    /// </summary>
    public class FormulaHost
    {
        /// <summary>
        /// The _local object identifier.
        ///
        /// When create a new local host without server copy,
        /// use local object id to identifie self.
        /// </summary>
        private String _localObjectId;

        private String _objectId;
        private String _createAt;
        private String _updateAt;

        private bool _isDirty;
        private bool _isDelete;
        private UIRootHelper _bindUiHelper = null;

        private int hostType;
        private FormulaHostStruct host;
        private Dictionary<string, CustomComponentBase> components = null;
        private Dictionary<string, FormulaObject> formulas = null;
        private Dictionary<int, FormulaObject> formulasByIdx = null;
        private Dictionary<string, object> signs = null;
        private FormulaHost _copySource;

        public String objectID
        {
            get
            {
                return this._objectId;
            }

            set
            {
                if (value != null)
                {
                    this._localObjectId = null;
                }

                this._objectId = value;
            }
        }

        public String createAt
        {
            get
            {
                return this._createAt;
            }

            set
            {
                this._createAt = value;
            }
        }

        public String updateAt
        {
            get
            {
                return this._updateAt;
            }

            set
            {
                this._updateAt = value;
            }
        }

        public String localObjectId
        {
            get
            {
                return this._localObjectId;
            }
        }

        public bool IsDirty
        {
            get
            {
                return this._isDirty;
            }

            set
            {
                this._isDirty = value;
            }
        }

        public bool IsDelete
        {
            get
            {
                return this._isDelete;
            }

            set
            {
                this._isDelete = value;
            }
        }

        public FormulaHost CopySource
        {
            get
            {
                return this._copySource;
            }

            set
            {
                this._copySource = value;
            }
        }

        /// <summary>
        /// Gets the name of the file.
        ///
        /// Get file(floder) name / host string type of this host object.
        /// </summary>
        /// <returns>The file name.</returns>
        public string GetFileName()
        {
            return this.host.fileName;
        }

        public int GetHostType()
        {
            return this.hostType;
        }

        public FormulaHost(int idx)
        {
            this.hostType = idx;
            this.Init(FormulaData.Instance.Hosts[idx]);
        }

        public FormulaHost(FormulaHostStruct hostData)
        {
            this.hostType = FomulaHostManager.Instance.GetHostTypeByFileName(host.fileName);
            this.Init(hostData);
        }

        private void Init(FormulaHostStruct hostData)
        {
            this._isDirty = false;
            this._localObjectId = null;

            this.host = hostData;
            this.signs = new Dictionary<string, object>();
            this.formulas = new Dictionary<string, FormulaObject>();
            this.formulasByIdx = new Dictionary<int, FormulaObject>();
            this.components = new Dictionary<string, CustomComponentBase>();

            if (this.host.singSet != null && this.host.singSet.Length > 0)
            {
                for (int i = 0; i < this.host.singSet.Length; i++)
                {
                    int sIdx = this.host.singSet[i];
                    if (sIdx < 0 || sIdx >= FormulaData.Instance.DynamicParams.Length)
                    {
                        continue;
                    }

                    string sName = FormulaData.Instance.DynamicParams[sIdx];
                    float defaultValue = this.host.signValueSet[i];

                    this.signs[sName] = defaultValue;
                }
            }

            if (this.host.formulaSet != null && this.host.formulaSet.Length > 0)
            {
                for (int i = 0; i < this.host.formulaSet.Length; i++)
                {
                    int fIdx = this.host.formulaSet[i];
                    if (fIdx < 0)
                    {
                        continue;
                    }

                    FormulaObject fObj = FormulaManager.Instance.CreateFormula(this, fIdx);
					Debug.Log (fIdx.ToString() + " " + i);

                    if (fObj == null)
                    {
                        continue;
                    }
					if (fObj.formula.name != null) {
						this.formulas[fObj.formula.name] = fObj;
						this.formulasByIdx[fObj.formula.idx] = fObj;
					}

                    
                }
            }
        }

        public FormulaObject GetFormulaObject(string name)
        {
            if (!this.formulas.ContainsKey(name))
            {
                return null;
            }

            return this.formulas[name];
        }

        public FormulaObject GetFormulaObject(int idx)
        {
            if (!this.formulasByIdx.ContainsKey(idx))
            {
                return null;
            }

            return this.formulasByIdx[idx];
        }

        public Dictionary<string, object> GetSigns()
        {
            return this.signs;
        }

        public float GetDynamicDataByKey(string key)
        {
            if (key == null)
            {
                return 0f;
            }

            if (this.signs == null)
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has no signs.");
                }

                return 0f;
            }

            if (!this.signs.ContainsKey(key) || this.signs[key] == null)
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has no sign key " + key + ".");
                }

                return 0f;
            }

            object val = this.signs[key];
            return float.Parse(val.ToString());
        }

        public int GetDynamicIntByKey(string key, int defaultValue = 0)
        {
            if (key == null)
            {
                return defaultValue;
            }

            if (this.signs == null)
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has no signs.");
                }

                return defaultValue;
            }

            if (!this.signs.ContainsKey(key))
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has no sign key " + key + ".");
                }

                return defaultValue;
            }

            object val = this.signs[key];
            return int.Parse(val.ToString());
        }

        public object GetDynamicObjByKey(string key)
        {
            if (key == null)
            {
                return null;
            }

            if (this.signs == null)
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has no signs.");
                }

                return null;
            }

            if (!this.signs.ContainsKey(key))
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has sign key " + key + ".");
                }

                return null;
            }

            object val = this.signs[key];
            return val;
        }

        public string GetDynamicStrByKey(string key)
        {
            if (key == null)
            {
                return null;
            }

            if (this.signs == null)
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has no signs.");
                }

                return null;
            }

            if (!this.signs.ContainsKey(key))
            {
                if (GameLogic.GameGlobal.IS_DEBUG)
                {
                    Debug.Log("Formula host object " + this.host.name + " has sign key " + key + ".");
                }

                return null;
            }

            object val = this.signs[key];
            if (val == null)
            {
                return null;
            }

            return val.ToString();
        }

        public bool SetDynamicData(string key, object value)
        {
            if (key == null)
            {
                return false;
            }

            if (this.signs == null)
            {
                return false;
            }

            this.signs[FormulaBase.SING_KEY_DATA_MODIFIED] = true;
            this.signs[key] = value;
            this.NotifyDynamicDataChange(key, value);
            return true;
        }

        public void RemoveDynamicData(string key)
        {
            if (key == null)
            {
                return;
            }

            if (this.signs == null)
            {
                return;
            }

            if (!this.signs.ContainsKey(key))
            {
                return;
            }

            this.signs.Remove(key);
        }

        public void SetLocalObjectId()
        {
            this._localObjectId = ObjectId.NewObjectId();
        }

        public void AddDynamicValue(string key, float value)
        {
            float val = this.GetDynamicDataByKey(key);
            this.SetDynamicData(key, val + value);
        }

        /// <summary>
        /// Adds the dynamic value remote.
        ///
        /// 通过服务器增减某个sign key属性值
        /// 主要用在必须通过服务器检测并设置的数据
        /// </summary>
        /// <param name="key">Key.</param>
        /// <param name="value">Value.</param>
        /// <param name="isSave">If set to <c>true</c> is save.</param>
        /// <param name="rsp">Rsp.</param>
        /// <param name="isMatchLimit">If set to <c>true</c> is match limit.</param>
        /// <param name="downLimit">Down limit.</param>
        /// <param name="upLimit">Up limit.</param>
        public bool AddDynamicValueRemote(string key, float value, bool isSave = true, HttpResponseDelegate rsp = null, bool isMatchLimit = false, float downLimit = 0f, float upLimit = -1f)
        {
            string uid = ExpandBmobCommon.GetUid();
            if (uid == null)
            {
                return false;
            }

            float val = this.GetDynamicDataByKey(key);
            float result = val + value;
            // local check
            if (!isMatchLimit)
            {
                if (result < downLimit)
                {
                    return false;
                }

                if (upLimit > 0 && result > upLimit)
                {
                    return false;
                }
            }

            // remote check, add
            ExpandBmobData.Instance.FineOne(uid, this.objectID, this.GetFileName(), new HttpAddDelegate((FormulaHost tempHost) =>
            {
                float __val = tempHost.GetDynamicDataByKey(key);
                result = __val + value;
                if (!isMatchLimit)
                {
                    if (result < downLimit)
                    {
                        if (rsp != null)
                        {
                            rsp(false);
                        }

                        return;
                    }

                    if (upLimit > 0 && result > upLimit)
                    {
                        if (rsp != null)
                        {
                            rsp(false);
                        }

                        return;
                    }
                }
                else
                {
                    if (result < downLimit)
                    {
                        result = downLimit;
                    }

                    if (upLimit > 0 && result > upLimit)
                    {
                        result = upLimit;
                    }
                }

                this.SetDynamicData(key, result);
                if (isSave)
                {
                    this.Save(rsp);
                    if (CommonPanel.GetInstance() != null)
                    {
                        CommonPanel.GetInstance().ShowWaittingPanel(true);
                    }
                }
                else
                {
                    if (rsp != null)
                    {
                        rsp(true);
                    }
                }
            }));

            return true;
        }

        /// <summary>
        /// Sets as user interface notify instance.
        /// 设置host为界面数据源对象
        /// host数据变动时会影响有关联的界面label text
        /// </summary>
        public void SetAsUINotifyInstance()
        {
            FomulaHostManager.Instance.SetNotifyUiHost(this);
            this.RefleshSigns();
        }

        public void SetAsUINotifyInstance(UIRootHelper urh)
        {
            this._bindUiHelper = urh;
            this.RefleshSigns();
        }

        private void RefleshSigns()
        {
            if (this.signs == null)
            {
                return;
            }

            int len = this.signs.Keys.Count;
            if (len <= 0)
            {
                return;
            }

            List<string> _keys = new List<string>(this.signs.Keys);
            foreach (string _k in _keys)
            {
                object _val = this.signs[_k];
                this.SetDynamicData(_k, _val);
            }
        }

        private void NotifyDynamicDataChange(string key, object value)
        {
            if (this._bindUiHelper != null)
            {
                this._bindUiHelper.OnNotifyDynamicDataChange(this, key, value);
                return;
            }

            FomulaHostManager.Instance.NotifyDynamicDataChange(this, key, value);
        }

        // ----------------------------------- count down about -----------------------------------
        /*
		/// <summary>
		/// Sets the real time count down.
		///
		/// 设置属性：
		/// SING_KEY_REAL_TIME_START 倒计时开始时间
		/// SING_KEY_REAL_TIME_END   倒计时结束时间
		///
		/// 剩余时间 = SING_KEY_REAL_TIME_END - 当前时间
		/// 经过时间 = 当前时间 - SING_KEY_REAL_TIME_START
		/// </summary>
		/// <param name="dt">Dt.</param>
		*/

        /// <summary>
        /// Sets the real time count down.
        ///
        /// 设置到期时间点
        /// 例如，到期时间是2016年6月30日18时15分15秒
        /// System.DateTime dt = new DateTime (2016, 6, 30, 18, 15, 15);
        /// host.SetRealTimeCountDown (dt);
        /// </summary>
        /// <param name="dt">Dt.</param>
        public void SetRealTimeCountDown(System.DateTime dt)
        {
            long t = FormulaBase.ConvertDateTimeInt(dt);
            this.SetRealTimeCountDown((int)t);
        }

        /// <summary>
        /// Sets the real time count down.
        ///
        /// 设置倒计时总时间
        /// 例如，1小时倒计时(3600秒
        /// host.SetRealTimeCountDown (3600);
        /// </summary>
        /// <param name="second">Second.</param>
        public void SetRealTimeCountDown(int second)
        {
            int realNow = FormulaBase.GetRealTimeNow();
            //no use System.DateTime.Now
            this.SetDynamicData(FormulaBase.SING_KEY_REAL_TIME_START, realNow);
            this.SetDynamicData(FormulaBase.SING_KEY_REAL_TIME_END, realNow + second);
        }

        /// <summary>
        /// Gets the real time count down.
        ///
        /// 获取总倒计时(秒
        /// </summary>
        /// <returns>The real time count down.</returns>
        public int GetRealTimeCountDown()
        {
            int startAt = this.GetDynamicIntByKey(FormulaBase.SING_KEY_REAL_TIME_START);
            int endAt = this.GetDynamicIntByKey(FormulaBase.SING_KEY_REAL_TIME_END);
            return endAt - startAt;
        }

        /// <summary>
        /// Gets the real time count down now.
        ///
        /// 获取倒计时剩余时间(秒
        /// </summary>
        /// <returns>The real time count down now.</returns>
        public int GetRealTimeCountDownNow()
        {
            int realNow = FormulaBase.GetRealTimeNow();
            int endAt = this.GetDynamicIntByKey(FormulaBase.SING_KEY_REAL_TIME_END);

            return endAt - realNow;
        }

        /// <summary>
        /// Gets the real time count down pass.
        ///
        /// 获取倒计时经过时间(秒
        /// </summary>
        /// <returns>The real time count down pass.</returns>
        public int GetRealTimeCountDownPass()
        {
            int realNow = FormulaBase.GetRealTimeNow();
            int startAt = this.GetDynamicIntByKey(FormulaBase.SING_KEY_REAL_TIME_START);

            return realNow - startAt;
        }

        /// <summary>
        /// Result the specified name and update.
        ///
        /// Calc value by key
        /// param update let the formula update all before calc result.
        ///
        /// </summary>
        /// <param name="name">Name.</param>
        /// <param name="update">If set to <c>true</c> update.</param>
        public float Result(string name, bool update = true)
        {
            FormulaObject fObj = this.GetFormulaObject(name);
            if (fObj == null)
            {
                return 0f;
            }

            if (update)
            {
                fObj.UpDataDynamicValue();
            }

            return fObj.Result();
        }

        /// <summary>
        /// Result the specified name and update.
        ///
        /// Calc value by key
        /// param update let the formula update all before calc result.
        ///
        /// idx 公式索引值，可通过FormulaKeys获得具体索引值（索引值对应公式名称可FormulaKeys参数注释）
        /// update 为true时，则先实时更新公式各个参数再进行运算
        /// </summary>
        /// <param name="idx">Idx.</param>
        /// <param name="update">If set to <c>true</c> update.</param>
        public float Result(int idx, bool update = true)
        {
            FormulaObject fObj = this.GetFormulaObject(idx);
            if (fObj == null)
            {
                return 0f;
            }

            if (update)
            {
                fObj.UpDataDynamicValue();
            }

            return fObj.Result();
        }

        /// <summary>
        /// Saves to server or local.
        ///
        /// Save all sign key with value to server.
        /// If already get uid from server, save to server,
        /// else save local.
        /// 把该host的全部sign key值存储到服务器
        ///
        /// HttpResponseDelegate rsp : save call back.
        ///
        /// private void xxx(cn.bmob.response.EndPointCallbackData<Hashtable> response) {}
        /// HttpResponseDelegate rsp = new HttpResponseDelegate(this.xxx);
        /// host.save(rsp);
        ///
        /// </summary>
        public void Save(HttpResponseDelegate rsp = null)
        {
            string uid = ExpandBmobCommon.GetUid();
            if (uid == null)
            {
                if (GameLogic.GameGlobal.ENABLE_LOCAL_SAVE)
                {
                    JsonData saveData = this.SignToJson();
                    JsonData loadData = GameLogic.GameGlobal.gConfigLoader.LoadPrefs(FomulaHostManager.SAVE_FILE_NAME);
                    if (loadData == null)
                    {
                        loadData = new JsonData();
                    }

                    if (this.objectID == null)
                    {
                        this.objectID = ObjectId.NewObjectId();
                    }

                    FomulaHostManager.Instance.AddHost(this);

                    loadData[this.objectID] = saveData;

                    GameLogic.GameGlobal.gConfigLoader.SavePrefs(FomulaHostManager.SAVE_FILE_NAME, loadData);
                }
            }
            else
            {
                ExpandBmobData.Instance.UpdateRow(uid, this, rsp);
            }
        }

        public static void SaveList(List<FormulaHost> hosts, HttpEndResponseDelegate rsp = null)
        {
            string uid = ExpandBmobCommon.GetUid();
            if (uid != null)
            {
                ExpandBmobData.Instance.UpdateList(uid, hosts, rsp);
            }
        }

        public static void DeleteList(List<FormulaHost> hosts, HttpEndResponseDelegate rsp = null)
        {
            string uid = ExpandBmobCommon.GetUid();
            if (uid != null)
            {
                ExpandBmobData.Instance.DeleteList(uid, hosts, rsp);
            }
        }

        public void Delete(HttpResponseDelegate rsp = null)
        {
            FomulaHostManager.Instance.DeleteHost(this, rsp);
        }

        private void HttpSaveDelegate(cn.bmob.response.DeleteCallbackData response)
        {
            //if (response != null) {
            // Debug.Log ("Formula host SaveToServer complete : " + response.ToString());
            //}
        }

        public void JsonToSign(SimpleJson.JsonObject jsonData)
        {
            if (jsonData == null || jsonData.Count == 0)
            {
                return;
            }

            foreach (string k in jsonData.Keys)
            {
                var _sv = jsonData[k];
                if (_sv == null)
                {
                    continue;
                }

                // Debug.Log (k + " : " + _sv + "/" + _sv.GetType());
                this.SetDynamicData(k, _sv);
            }
        }

        public void JsonToSign(JsonData jsonData)
        {
            if (jsonData == null || jsonData.Count == 0)
            {
                return;
            }

            foreach (string k in jsonData.Keys)
            {
                JsonData _jd = jsonData[k];
                if (_jd == null)
                {
                    continue;
                }

                string _sv = _jd.ToString();
                try
                {
                    float _fv = float.Parse(_sv);
                    this.SetDynamicData(k, _fv);
                }
                catch (Exception e)
                {
                    this.SetDynamicData(k, _sv);
                }
            }
        }

        public JsonData SignToJson()
        {
            if (this.signs == null || this.signs.Count == 0)
            {
                return null;
            }

            JsonData jsonData = new JsonData();
            jsonData[FormulaBase.SIGN_KEY_HOST_NAME] = this.host.fileName;
            foreach (string k in this.signs.Keys)
            {
                object value = this.signs[k];
                if (value is int)
                {
                    jsonData[k] = (int)value;
                    continue;
                }

                if (value is Int16)
                {
                    jsonData[k] = (uint)value;
                    continue;
                }

                if (value is Int32)
                {
                    jsonData[k] = (uint)value;
                    continue;
                }

                if (value is Int64)
                {
                    jsonData[k] = (Int64)value;
                    continue;
                }

                if (value is uint)
                {
                    jsonData[k] = (uint)value;
                    continue;
                }

                if (value is UInt64)
                {
                    jsonData[k] = (UInt64)value;
                    continue;
                }

                if (value is UInt32)
                {
                    jsonData[k] = (UInt32)value;
                    continue;
                }

                if (value is UInt16)
                {
                    jsonData[k] = (UInt16)value;
                    continue;
                }

                if (value is float)
                {
                    double fvalue = System.Math.Round((double)((float)value), 2);
                    jsonData[k] = fvalue;
                    continue;
                }

                if (value is Double)
                {
                    value = System.Math.Round((double)value, 2);
                    jsonData[k] = (double)value;
                    continue;
                }

                if (value is string)
                {
                    jsonData[k] = (string)value;
                    continue;
                }

                if (value is bool)
                {
                    jsonData[k] = (bool)value;
                    continue;
                }

                if (value is BmobInt)
                {
                    jsonData[k] = ((BmobInt)value).Get();
                    continue;
                }

                if (value is BmobDouble)
                {
                    jsonData[k] = ((BmobDouble)value).Get();
                    continue;
                }

                if (value is BmobBoolean)
                {
                    jsonData[k] = ((BmobBoolean)value).Get();
                    continue;
                }

                if (value is BmobLong)
                {
                    jsonData[k] = ((BmobLong)value).Get();
                    continue;
                }

                jsonData[k] = JsonAdapter.JSON.ToJsonString(value);
            }

            return jsonData;
        }
    }
}