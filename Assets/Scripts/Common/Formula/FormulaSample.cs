// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System;
using FormulaBase;
using UnityEngine;

namespace FormulaBase {
	/// <summary>
	/// Formula sample.
	/// 
	/// Formula模块使用说明
	/// </summary>
	public class FormulaSample {
		/// <summary>
		/// The host.
		/// 
		/// Host对象，他是Formula模块所有数据逻辑的主体运行对象，类似GameObject
		/// 它可以有自己的动态数据属性Sign
		/// 构成它的公式集
		/// 和基于编辑器生成的，自定义内容的代码模块
		/// </summary>
		private FormulaHost host;

		/// <summary>
		/// The comp base.
		/// 
		/// 在游戏物件设计/对象管理器 编辑器中
		/// 可以为host添加自定义模块的引用
		/// 模块均在编辑器Save时自动生成，均默认继承CustomComponentBase 
		/// 继承的模块可以作为某一类host的管理器，例如 role manager
		/// 也可以负责处理具体的某些逻辑行为的集合，例如role level manager
		/// 
		/// 继承模块建议使用静态方法，然后传入host对象进行具体操作（绝大部分的操作其实是对动态数据的更改而已）
		/// 例如下面的LevelUpSample、GetLevelSample
		/// </summary>
		private CustomComponentBase compBase;

		/// <summary>
		/// Levels up sample.
		/// 
		/// 在游戏物件设计/对象管理器 编辑器中
		/// 该对象带有动态数据属性LEVEL（LEVEL的定义则在 游戏物件设计/动态参数管理器 编辑器中）
		/// 即可通过host的AddDynamicValue、SetDynamicData、GetDynamicDataByKey对动态数据进行操作
		/// 
		/// 数据类型默认float
		/// 获取数据后可根据需要自行转化
		/// </summary>
		public static void LevelUpSample(FormulaHost role) {
			role.AddDynamicValue ("LEVEL", 1f);
			role.AddDynamicValue (SignKeys.LEVEL, 1f);

//			role.SetDynamicData("EQUIP1", value);
//			float attack = role.Result(FormulaKeys.FORMULA_2)
		}

		public static int GetLevelSample(FormulaHost role) {
			return (int)role.GetDynamicDataByKey ("LEVEL");
		}

		/// <summary>
		/// Result this instance.
		/// 
		/// 获取运算数据
		/// 
		/// 在游戏物件设计/公式管理器 编辑器中
		/// 策划定义好形成各个数据运算结果的公式
		/// 通过host.Result可实时获得这些公式的运算结果
		/// </summary>
		private float Result() {
			return this.host.Result (FormulaKeys.FORMULA_0);
		}

		/// <summary>
		/// Creates the host sample.
		/// 
		/// 创建物件示例
		/// </summary>
		private void CreateHostSample() {
			FormulaHost host = FomulaHostManager.Instance.CreateHost (HostKeys.HOST_0);
		}
	}
}