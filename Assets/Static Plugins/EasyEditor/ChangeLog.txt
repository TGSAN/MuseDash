v. 2.17 :

- Field from the base class of a customized script are displayed on top of the inspector followed by the child fields.

v. 2.16 :

Fix : 
- Buttons created from editor script with the attribute [Inspector] were not working correctly anymore (in tab interface example for example)

v. 2.15 :

Fix : 
- Some property drawers were not behaving correctly when multi-selecting gameobjects.

v. 2.1 :

New : 
- Buttons generated by EasyEditor in the inspector are compatible with multi edition of Monobehaviour/Scriptable object.

v. 2.0 :

New : 
- Unity classes inheriting from Object and custom serializable classes can be selected in a list and rendered in the
same inspector, avoiding jumping between game object in the scene.

v. 1.58 :

New :
- New example folder in "EasyEditor/Examples/Inheritance" introducing how EasyEditor supports inheritance.

v. 1.57 :

Fix :
- Two buttons were displayed for one method if this one were an override of a base class method.

v. 1.56 :

New :
- [Texture] and [Sprite] attributes introduced to display textures and sprites as thumbnail (only from Unity 5 for sprites).

v. 1.55 :

New :
- Full support of inheritance.

v. 1.54 :

New :
- Added support of Gradient in the inspector.

v. 1.53 :

Fix :
- Editing list in inline game objects was not serialized correctly.

v. 1.52 :

New :
- Can handle insert and remove element events in reorderable list.

Fix :
- Multi-editing of list was not handled correctly.

v. 1.51 :

Fix :
- HideRenderer and ShowRenderer were conflicting with Visibility attribute. Note that Visibility attribute may be an easier
way of hiding and showing ui elements in most case.

v. 1.5 :

New :
- Object fields can be rendered inline with the attribute [Inspector(rendererType = "InlineClassRenderer")].
- Objects and custom classes rendered inline have a better visual rendering with colored background to better identify 
them in the inspector.

v. 1.46 :

Fix :
- Serialized lists get updated even if it is modified on Monobehaviour side no matter it is in base class or children.

v. 1.45 :

Fix :
- reorderable list was catching every drop event in the inspector preventing user from adding new scripts on an object.

v. 1.44 :

New :
- Now allows to lock Inspector panel and drag and drop several elements in reorderable list.

Fix :
- Undo was not working consistently.

v. 1.43 :

New :
- A UI element can have several Message attributes.
- Settings.cs introduced to set custom Easy Editor behaviour including indentation, Comments position,
Group foldable or not by default ...
- New attribute [Path] for string introduced : An asset path can be assigned to a string just by dragging
it on the string field.
- New example : Tab-like interface.
- Documentation improved with Table of Content.

Fix :
- field with HideInInspector can still be referenced in attribute Visibility, Message etc...

v. 1.42 :

New :
- Visibility Attribute accept a method returning a bool as parameter.

Fix :
- Remove Rotorz demo two options from Window menu.

v. 1.41 :

New :
- Groups can be foldable if specified with [Inspector(group = "Group Name", foldable = true)]
- Elements inside a group are indented for better readibility.
- Generic class array element has an id displayed in Rotorz list (Element index in Unity 4.5
and Element name for generic class with name from Unity 4.6 included).

v. 1.4 :

New :
- Added property drawer ProgressBarDrawer generously provided by Alessio Marzoli.

Fix :
- ReadOnly vector will be rendered correctly even if the inspector width is small.
- Color32 is rendered in the inspector.
- Private serialized custom class field was not rendered.

v. 1.39 :

New :
- Can set the alignment and size of the image displayed from a string.
- Can render mask enum with the attribute [EnumFlag].
- Examples are fully documented (Can use easy editor without refering to Readme.pdf).

Fix :
- The box containing group description always span the entire width of the inspector.
- AnimationCurve is rendered in the inspector

v. 1.38 :

New :
- The header of a group can be hidden ([Inspector(group = "Basic Settings", displayHeader = false)].
- Can add a group description label under group header.
- Can display an image in the inspector through a location indicated by a string.
- Can mark a field as readOnly to avoid it to be modified in the editor.
- Can display a message of type Info, Warning, or Error under a ui element based on different conditions.

Fix :
- Reduced the space between the component header and the properties in the inspector.
- UI elements not belonging to any group were not all rendered on top of the component.

v. 1.37 :

New :
- Support ScriptableObject.
- Can add a group description label under group header.

Fix :
- Two classes were not inside the namespace EasyEditor.

v. 1.36 :

New :
- Inline rendering of custom class. Does not support inline rendering inside lists for the moment.

Fix :
- Prefab and Undo operation are refreshed right after being executed.
- Width of properties horizontally serialized field improved.
- Every examples added to the namespace EasyEditor.

v. 1.35 :

Fix :
- Prefab and Undo operation are refreshed right after being executed.

v. 1.34 :
New :
- Comments can be added under properties in the inspector with the attribute [Comment("")].
- Properties can be hidden based on the value of another property with the attribute [Visible(string id, object value)].
- Consecutive properties can be layed out horizontally with the attributes [BeginHorizontal], [EndHorizontal].
- EETooltip attribute allows to add tooltip to button added in the inspector through [Inspector] attribute.

v. 1.33 :
Fix :
- Was not compiling correctly because PropertyDrawer were used outside of Editor folder.

v. 1.32 :
New :
- Custom editor code can be rendered at any position in the inspector.

v. 1.31 :
Fix :
- Will not try to render fields that are marked as Serializable in .NET but are not really serialized by Unity (ex : long, short ...).

v. 1.30 :
New :
- Custom class and struct with the attribute System.Serializable are fully compatible with the reorderable list.
The height of the element in the list will change based on if the custom class is unfold or not.

Fix :
- The editor script generated from a Monobehaviour under a namespace will not generate any compilation error.

v. 1.23 :
New :
- pdf documentation included.

v. 1.22 :
New :
- The serialized lists are rendered with a customization provided by an open source project : Rotorz (https://bitbucket.org/rotorz/reorderable-list-editor-field-for-unity/overview).
It allows a better integration of the lists in the inspector and also a context menu to insert elements at a specific position in the list.

v. 1.2 :
New :
- No need to add an attribute for each field to set the group they belong to. Every fields under an attribute with the group specified will belong to this group.
- More examples to show each features.

v. 1.1 :
New :
- Button can be rendered to trigger function in the monobehaviour but also in the editor script.
- All fields displayed by Unity in the inspector by default will be displayed even if the attribute [Inspector] is not specified. 
This include public fields and fields with attributes [SerializeField], [System.Serializable].
- Groups and fields can be hidden or displayed in the editor script.

v. 1 :
- Unity Serialized Type, IList of serialized type and Button can be rendered in the inspector just with the help of attributes in the code.